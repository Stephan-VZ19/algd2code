import java.util.*;

public class GraphI {
    private final boolean[][] adjMatrix;
    public final int n;

    public GraphI(int numNodes) {
        if (numNodes < 1)
            throw new IllegalArgumentException();
        this.adjMatrix = new boolean[numNodes][numNodes];
        this.n = numNodes;
    }

    public int[] topsort(){
        // indegree berechnen
        int[] indeg = new int[n];
        for (int i=0; i<n;i++){
            for (int j=0; j<n; j++){
                indeg[i] += adjMatrix[j][i] ? 1:0;
            }
        }
        // topsort
        Queue S = new LinkedList();
        for (int i=0; i<n; i++){
            if(indeg[i]==0) S.add(i);
        }

        int[] result = new int[n];
        for(int i=0; i<n; i++){
            if(!S.isEmpty()){
                result[i] = (int) S.remove();
                for(int j=0; j<n; j++){
                    if(adjMatrix[result[i]][j]) {
                        indeg[j]--;
                        if(indeg[j] == 0) S.add(j);
                    }
                }
            }
            return null;
        }
        return result;
    }
    public boolean addEdge(int u, int v, int weight){
        if(0<= u && u<n && 0 <= v && v<n){
            if(adjMatrix[u][v]) return false;
            adjMatrix[u][v] = true;
            return true;
        }
        throw new IndexOutOfBoundsException();
    }
    public static void main(String[] args) {
        GraphI g = new GraphI(3);
        g.addEdge(0,1);
        g.addEdge(0,2);
        g.addEdge(1,2);
        int[] topsort = g.topsort();
        for (int i=0; i<topsort.length; i++){
            System.out.println(topsort[i]);
        }
    }
}
